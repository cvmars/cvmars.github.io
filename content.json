{"meta":{"title":"cvmars的个人主页","subtitle":"个人主页","description":"技术分享","author":"cvmars","url":"https://cvmars.github.io"},"pages":[],"posts":[{"title":"Android 热修复 Tinker接入","slug":"Android-热修复-Tinker接入","date":"2017-02-09T12:30:42.000Z","updated":"2017-02-09T12:31:38.000Z","comments":true,"path":"2017/02/09/Android-热修复-Tinker接入/","link":"","permalink":"https://cvmars.github.io/2017/02/09/Android-热修复-Tinker接入/","excerpt":"","text":"#####Demo地址 #####官方Demo #####Tinker官方Wiki #####新建项目，添加gradle依赖在项目的 build.gradle 中，添加tinker-patch-gradle-plugin的依赖 1234567891011121314151617buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.2.0&apos; classpath (&apos;com.tencent.tinker:tinker-patch-gradle-plugin:1.7.7&apos;) // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter() &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; #####在app的gradle文件，我们需要添加tinker的库依赖以及apply tinker的gradle插件. 12345678910dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) testCompile &apos;junit:junit:4.12&apos; compile &quot;com.android.support:appcompat-v7:23.1.1&quot; compile(&quot;com.tencent.tinker:tinker-android-lib:1.7.7&quot;) &#123; changing = true &#125; provided(&quot;com.tencent.tinker:tinker-android-anno:1.7.7&quot;) &#123; changing = true &#125; compile &quot;com.android.support:multidex:1.0.1&quot;&#125;//apply tinker插件apply plugin: &apos;com.tencent.tinker.patch&apos; #####顺便加一下签名的配置，放在项目目录。 #####此时构建项目也许会遇到下面问题 在下面的build.gradle 中设置tinker 配置，具体请看下一段代码。 对tinker 进行配置，整个build.gradle文件如下所示。直接拷贝自己需要的就行。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165apply plugin: &apos;com.android.application&apos;//apply tinker插件apply plugin: &apos;com.tencent.tinker.patch&apos;android &#123; compileSdkVersion 25 buildToolsVersion &quot;25.0.1&quot; defaultConfig &#123; applicationId &quot;com.youxiake.tinkerdemo&quot; minSdkVersion 14 targetSdkVersion 25 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; signingConfigs &#123; release &#123; try &#123; storeFile file(&quot;release.jks&quot;) storePassword &quot;testres&quot; keyAlias &quot;testres&quot; keyPassword &quot;testres&quot; &#125; catch (ex) &#123; throw new InvalidUserDataException(ex.toString()) &#125; &#125; &#125; buildTypes &#123; release &#123; minifyEnabled true signingConfig signingConfigs.release proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; debug &#123; debuggable true minifyEnabled true signingConfig signingConfigs.release proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123; exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos; &#125;) compile &apos;com.android.support:appcompat-v7:25.1.1&apos; testCompile &apos;junit:junit:4.12&apos; //可选，用于生成application类 provided(&apos;com.tencent.tinker:tinker-android-anno:1.7.7&apos;) //tinker的核心库 compile(&apos;com.tencent.tinker:tinker-android-lib:1.7.7&apos;) compile &quot;com.android.support:multidex:1.0.1&quot;&#125;def bakPath = file(&quot;$&#123;buildDir&#125;/bakApk/&quot;)ext &#123; tinkerEnabled = true tinkerOldApkPath = &quot;$&#123;bakPath&#125;/app-debug-0209-10-09-21.apk&quot; //proguard mapping file to build patch apk tinkerApplyMappingPath = &quot;$&#123;bakPath&#125;/&quot; //resource R.txt to build patch apk, must input if there is resource changed tinkerApplyResourcePath = &quot;$&#123;bakPath&#125;/app-debug-0209-10-09-21-R.txt&quot;&#125;def getOldApkPath() &#123; return ext.tinkerOldApkPath&#125;def getApplyMappingPath() &#123; return ext.tinkerApplyMappingPath&#125;def getApplyResourceMappingPath() &#123; return ext.tinkerApplyResourcePath&#125;if (ext.tinkerEnabled) &#123; tinkerPatch &#123; oldApk = getOldApkPath() ignoreWarning = false useSign = true// packageConfig &#123;//// configField(&quot;TINKER_ID&quot;, &quot;2.0&quot;)// &#125; buildConfig&#123; tinkerId = &quot;1.0&quot; applyMapping = getApplyMappingPath() applyResourceMapping = getApplyResourceMappingPath() &#125; lib &#123; pattern = [&quot;lib/armeabi/*.so&quot;] &#125; res &#123; pattern = [&quot;res/*&quot;, &quot;assets/*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;] ignoreChange = [&quot;assetsmple_meta.txt&quot;] largeModSize = 100 &#125; sevenZip &#123; zipArtifact = &quot;com.tencent.mm:SevenZip:1.1.10&quot; &#125; dex &#123; dexMode = &quot;jar&quot; pattern = [&quot;classes*.dex&quot;, &quot;assetscondary-dex-?.jar&quot;] loader = [&quot;com.tencent.tinker.loader.*&quot;, &quot;com.tencent.tinker.*&quot;, &quot;com.youxiake.tinkerdemo.SampleApplication&quot; ] &#125; &#125;&#125;android.applicationVariants.all &#123; variant -&gt; /** * task type, you want to bak */ def taskName = variant.name tasks.all &#123; if (&quot;assemble$&#123;taskName.capitalize()&#125;&quot;.equalsIgnoreCase(it.name)) &#123; it.doLast &#123; copy &#123; def date = new Date().format(&quot;MMdd-HH-mm-ss&quot;) from &quot;$&#123;buildDir&#125;/outputs/apk/$&#123;project.getName()&#125;-$&#123;taskName&#125;.apk&quot; into bakPath rename &#123; String fileName -&gt; fileName.replace(&quot;$&#123;project.getName()&#125;-$&#123;taskName&#125;.apk&quot;, &quot;$&#123;project.getName()&#125;-$&#123;taskName&#125;-$&#123;date&#125;.apk&quot;) &#125; from &quot;$&#123;buildDir&#125;/outputs/mapping/$&#123;taskName&#125;/mapping.txt&quot; into bakPath rename &#123; String fileName -&gt; fileName.replace(&quot;mapping.txt&quot;, &quot;$&#123;project.getName()&#125;-$&#123;taskName&#125;-$&#123;date&#125;-mapping.txt&quot;) &#125; from &quot;$&#123;buildDir&#125;/intermediates/symbols/$&#123;taskName&#125;/R.txt&quot; into bakPath rename &#123; String fileName -&gt; fileName.replace(&quot;R.txt&quot;, &quot;$&#123;project.getName()&#125;-$&#123;taskName&#125;-$&#123;date&#125;-R.txt&quot;) &#125; &#125; &#125; &#125; &#125;&#125; 添加(或修改)项目的 Application ,使之继承DefaultApplicationLike。123456789101112131415161718192021222324252627282930313233343536@SuppressWarnings(&quot;unused&quot;)@DefaultLifeCycle(application = &quot;com.youxiake.tinkerdemo.SampleApplication&quot;, flags = ShareConstants.TINKER_ENABLE_ALL, loadVerifyFlag = false)public class SampleApplicationLike extends DefaultApplicationLike &#123; private static final String TAG = &quot;Tinker.SampleApplicationLike&quot;; public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) &#123; super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent); &#125; /** * install multiDex before install tinker * so we don&apos;t need to put the tinker lib classes in the main dex * * @param base */ @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base) &#123; super.onBaseContextAttached(base); //you must install multiDex whatever tinker is installed! MultiDex.install(base); //installTinker after load multiDex //or you can put com.tencent.tinker.** to main dex TinkerInstaller.install(this); &#125; @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) &#123; getApplication().registerActivityLifecycleCallbacks(callback); &#125;&#125; #####然后修改manifest.xml将application指向com.youxiake.tinkerdemo.SampleApplication就行,开始会报错,build一下项目就好了 #####！！！指定 application 有三个注意的地方 ，如下这三个地方的application应该是一致的 #####这个案例中我们会将patch文件直接push到sdcard根目录，要从sdcard中读取补丁，所以要添加权限。 一定要注意：添加SDCard权限，如果你是6.x以上的系统，自己添加上授权代码（6.0权限问题），或者手动在手机设置页面打开SDCard读写权限。 1&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; #####搭建完成，开始进行测试了，在activity中新建如下代码。12345678910111213public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toast.makeText(this,&quot;应用出错了....&quot;,Toast.LENGTH_SHORT).show(); //进行补丁的操作 TinkerInstaller.onReceiveUpgradePatch(this, Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/patch&quot;); &#125;&#125; #####先运行一个 应用出错的程序在手机上作为上线出bug的版本，运行图中的assembleDebug ，会在图一中生成debug文件。根据出错的apk的日期，去设置build.gredle 中 出错包的信息 将MainActivity中的 Toast 修改。(代表修改好的包)123456789101112public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toast.makeText(this,&quot;应用正常了....&quot;,Toast.LENGTH_SHORT).show(); //进行补丁的操作 TinkerInstaller.onReceiveUpgradePatch(this, Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/patch&quot;); &#125;&#125; #####运行tinkerPatchDebug，开始生成补丁 #####（手机root过或者模拟器）通过adb push 补丁到和MainActivity中加载补丁的路径一致,补丁重命名 patch(随便在下怎么取名，一致就行) TinkerInstaller.onReceiveUpgradePatch(this, Environment.getExternalStorageDirectory().getAbsolutePath()+”/patch”); 最后结果 （第一次写，太唠叨了）###Demo地址github","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-02-09T12:14:28.132Z","updated":"2017-02-09T12:14:28.132Z","comments":true,"path":"2017/02/09/hello-world/","link":"","permalink":"https://cvmars.github.io/2017/02/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}